generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                String             @id @default(cuid())
  email             String?            @unique
  name              String?
  surname           String?
  phone             String?
  emailVerified     DateTime?
  image             String?
  role              Role               @default(USER)
  password          String?
  verified          Boolean?           @default(false)
  provider          String?
  providerId        String?
  registrationDate  DateTime           @default(now())
  firstTestDate     DateTime?
  specialty         String?
  description       String?
  accounts          Account[]
  messages          Message[]
  profile           Profile?
  sessions          Session[]
  verificationToken VerificationToken? @relation("UserToVerificationToken")
  DiseaseToUser     DiseaseToUser[]
  DisesesList       String[]
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  userId    String   @unique
  user      User     @relation("UserToVerificationToken", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([id, token])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  title     String
  body      String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Post {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  title          String
  body           String
  published      Boolean          @default(false)
  image          String?
  CategoryToPost CategoryToPost[]
}

model Category {
  id             Int              @id @default(autoincrement())
  name           String
  CategoryToPost CategoryToPost[]
}

model DefaultTest {
  id        Int    @id @default(autoincrement())
  testTitle String @unique
  test      Test   @relation("DefaultTestRelation", fields: [testTitle], references: [title])
}

model Test {
  id          Int          @id @default(autoincrement())
  title       String       @unique
  urltitle    String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  defaultTest DefaultTest? @relation("DefaultTestRelation")
  disease     Disease[]
  questions   Question[]
}

model Question {
  id      Int      @id @default(autoincrement())
  text    String
  testId  Int
  options Option[]
  test    Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
}

model Option {
  id          Int           @id @default(autoincrement())
  text        String
  score       Int
  questionId  Int
  question    Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  MaxDiseases MaxDiseases[]
  MinDiseases MinDiseases[]
}

model Disease {
  id            Int             @id @default(autoincrement())
  title         String          @unique
  testId        Int?
  test          Test?           @relation(fields: [testId], references: [id])
  DiseaseToUser DiseaseToUser[]
  MaxDiseases   MaxDiseases[]
  MinDiseases   MinDiseases[]
}

model CPAPMachine {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CategoryToPost {
  A        Int
  B        Int
  Category Category @relation(fields: [A], references: [id], onDelete: Cascade)
  Post     Post     @relation(fields: [B], references: [id], onDelete: Cascade)

  @@id([A, B], map: "_CategoryToPost_AB_pkey")
  @@index([B], map: "_CategoryToPost_B_index")
  @@map("_CategoryToPost")
}

model DiseaseToUser {
  A       Int
  B       String
  Disease Disease @relation(fields: [A], references: [id], onDelete: Cascade)
  User    User    @relation(fields: [B], references: [id], onDelete: Cascade)

  @@id([A, B], map: "_DiseaseToUser_AB_pkey")
  @@index([B], map: "_DiseaseToUser_B_index")
  @@map("_DiseaseToUser")
}

model MaxDiseases {
  A       Int
  B       Int
  Disease Disease @relation(fields: [A], references: [id], onDelete: Cascade)
  Option  Option  @relation(fields: [B], references: [id], onDelete: Cascade)

  @@id([A, B], map: "_MaxDiseases_AB_pkey")
  @@index([B], map: "_MaxDiseases_B_index")
  @@map("_MaxDiseases")
}

model MinDiseases {
  A       Int
  B       Int
  Disease Disease @relation(fields: [A], references: [id], onDelete: Cascade)
  Option  Option  @relation(fields: [B], references: [id], onDelete: Cascade)

  @@id([A, B], map: "_MinDiseases_AB_pkey")
  @@index([B], map: "_MinDiseases_B_index")
  @@map("_MinDiseases")
}

enum Role {
  USER
  ADMIN
  DOCTOR
}

"use server"
import {Prisma} from '@prisma/client';
import {hashSync} from 'bcrypt';
import {sendEmail} from "@/shared/send-mail";
import {getUserSession} from "@/lib/get-user-session";
import {prisma} from "../../prisma/prisma-client";


async function sendVerificationEmail(email: string, token: string) {
    const htmlContent = `
        <div>
            <h1>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</h1>
            <div>–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${token}</div>
        </div>
    `;

    await sendEmail(
        email,
        '–ù–æ–∂–∏ –°–ü–ë / üìù –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
        htmlContent
    );
}

export async function updateUserInfo(body: Prisma.UserUpdateInput) {
    try {
        const currentUser = await getUserSession();

        if (!currentUser) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const findUser = await prisma.user.findFirst({
            where: {
                id: currentUser.id,
            },
        });

        if (!findUser) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        await prisma.user.update({
            where: {
                id: currentUser.id,
            },
            data: {
                name: body.name,
                email: body.email,
                password: body.password ? hashSync(body.password as string, 10) : findUser.password,
            },
        });
    } catch (err) {
        console.log('Error [UPDATE_USER]', err);
        throw err;
    }
}

export async function registerUser(body: {
    password: string;
    name: string | null | undefined
    email: string
}) {
    try {
        const user = await prisma.user.findFirst({
            where: {
                email: body.email,
            },
        });

        if (user) {
            if (!user.verified) {
                const token = Math.floor(100000 + Math.random() * 900000).toString();

                await prisma.verificationToken.upsert({
                    where: {
                        userId: user.id,
                    },
                    update: {
                        token,
                    },
                    create: {
                        token,
                        userId: user.id,
                    },
                });

                await sendVerificationEmail(user.email!, token);
                throw new Error('–ü–æ—á—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ù–æ–≤—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.');
            }

            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.');
        }

        const createdUser = await prisma.user.create({
            data: {
                name: body.name,
                email: body.email,
                password: hashSync(body.password!, 10),
            },
        });

        const code = Math.floor(100000 + Math.random() * 900000).toString();

        await prisma.verificationToken.create({
            data: {
                token: code,
                userId: createdUser.id,
            },
        });

        await sendVerificationEmail(createdUser.email!, code);
    } catch (err) {
        console.log('Error [CREATE_USER]', err);
        throw err;
    }
}

export async function verifyEmail(token: string) {
    try {
        // –ù–∞–π–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å —Ç–æ–∫–µ–Ω–∞
        const verificationToken = await prisma.verificationToken.findFirst({
            where: {token},
        });

        if (!verificationToken) {
            throw new Error("–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.");
        }


        // –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ
        await prisma.user.update({
            where: {id: verificationToken.userId},
            data: {verified: true},
        });

        // –£–¥–∞–ª–∏—Ç–µ —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await prisma.verificationToken.delete({
            where: {token: verificationToken.token},
        });

        return "–ü–æ—á—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.";
    } catch (error: any) {
        throw new Error(error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞.");
    }
}


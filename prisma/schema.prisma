generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                String             @id @default(cuid())
  email             String?            @unique
  name              String?
  surname           String?
  phone             String?
  emailVerified     DateTime?
  image             String?
  role              Role               @default(USER)
  password          String?
  verified          Boolean?           @default(false)
  provider          String?
  providerId        String?
  registrationDate  DateTime           @default(now())
  firstTestDate     DateTime?
  specialty         String?
  accounts          Account[]
  messages          Message[]
  profile           Profile?
  sessions          Session[]
  verificationToken VerificationToken? @relation("UserToVerificationToken")
  Disease           Disease[]
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  userId    String   @unique
  user      User     @relation("UserToVerificationToken", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([id, token])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  title     String
  body      String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Post {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  title      String
  body       String
  published  Boolean    @default(false)
  categories Category[] @relation("CategoryToPost")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[] @relation("CategoryToPost")
}

model Test {
  id        Int        @id
  title     String
  urltitle  String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Disease   Disease[]
  questions Question[]
}

model Question {
  id      Int      @id @default(autoincrement())
  text    String
  testId  Int
  options Option[]
  test    Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
}

model Option {
  id                  Int       @id @default(autoincrement())
  text                String
  score               Int
  questionId          Int
  question            Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  Disease_MaxDiseases Disease[] @relation("MaxDiseases")
  Disease_MinDiseases Disease[] @relation("MinDiseases")
}

model CPAPMachine {
  id          String   @id
  name        String
  description String
  price       Float
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model Disease {
  id                 Int      @id @default(autoincrement())
  title              String   @unique
  testId             Int?
  Test               Test?    @relation(fields: [testId], references: [id])
  User               User[]
  Option_MaxDiseases Option[] @relation("MaxDiseases")
  Option_MinDiseases Option[] @relation("MinDiseases")
}

enum Role {
  USER
  ADMIN
  DOCTOR
}

model Story {
    id              Int    @id @default(autoincrement())
    previewImageUrl String

    items StoryItem[]

    createdAt DateTime @default(now())
}

model StoryItem {
    id Int @id @default(autoincrement())

    storyId Int
    story   Story @relation(fields: [storyId], references: [id])

    sourceUrl String

    createdAt DateTime @default(now())
}
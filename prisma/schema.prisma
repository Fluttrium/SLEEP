generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                String              @id @default(cuid())
  email             String?             @unique
  name              String?
  surname           String?
  phone             String?
  emailVerified     DateTime?
  image             String?
  role              Role                @default(USER)
  password          String?
  messages          Message[]
  profile           Profile?
  accounts          Account[]
  sessions          Session[]
  verified          Boolean?            @default(false)
  provider          String?
  providerId        String?
  verificationToken VerificationToken[] @relation("UserToVerificationToken")
  registrationDate  DateTime            @default(now())
  disease           Disease[]
  firstTestDate     DateTime?
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique // Изменено на String
  createdAt DateTime @default(now())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserToVerificationToken")

  @@unique([id, token])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  title     String
  body      String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Post {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  title      String
  body       String
  published  Boolean    @default(false)
  categories Category[] @relation("CategoryToPost")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[] @relation("CategoryToPost")
}

enum Role {
  USER
  ADMIN
}

///////////

model Test {
  id        Int        @id
  title     String
  urltitle  String     @unique
  questions Question[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  disease   Disease[]
}

model Question {
  id      Int      @id @default(autoincrement())
  text    String
  test    Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId  Int
  options Option[]
}

model Option {
  id         Int       @id @default(autoincrement())
  text       String
  score      Int
  question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  minDisease Disease[] @relation("MinDiseases")
  maxDisease Disease[] @relation("MaxDiseases")
}

model Disease {
  id        Int      @id @default(autoincrement())
  title     String   @unique
  testId    Int? // Теперь необязательное поле
  test      Test?    @relation(fields: [testId], references: [id])
  users     User[]
  OptionMin Option[] @relation("MinDiseases")
  OptionMax Option[] @relation("MaxDiseases")
}

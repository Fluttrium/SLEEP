"use client"
import { NewChart } from "@/components/newchart";
import React, { useEffect, useState, useMemo, useRef } from "react";
import Doctorscopmonent from "@/components/resultComponents/doctorscopmonent";
import { PostsResult } from "@/components/resultComponents/postrsult";
import { CardDescription } from "@/components/ui/card";
import { useSession } from "next-auth/react";
import { Category, Disease, Post, User } from "@prisma/client";

export default function NnewTestResComp() {
    const [result, setResult] = useState<string[] | null>(null);
    const [maxDiagnosis, setMaxDiagnosis] = useState<any | null>(null);
    const { data: session } = useSession();
    const id = session?.user.id;
    const [disease, setDisease] = useState<Disease>();
    const [post, setPost] = useState<Post & { categories: Category[] } | null>(null);
    const [doctors, setDocrors] = useState<User[] >([]);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç—å—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const [isOpen, setIsOpen] = useState(true);

    // –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –¥–ª—è ref
    const containerRef = useRef<HTMLDivElement | null>(null); // –¢–∏–ø ref

    const fetchInfoForWidget = async (diagnos: string) => {
        try {
            const response = await fetch('/api/resultWidgets', {
                method: "POST",
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ diagnos }),
            });
            const data = await response.json();
            console.log("–ò–Ω—Ñ–∞ –æ –¥–∏–∞–≥–Ω–æ–∑–µ:", data);
            setDisease(data.disease); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ–∑
            setPost(data.disease.post); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å—Ç
            setDocrors(data.disease.assignedDoctors);
        } catch (err) {
            console.log(err);
        }
    };

    useEffect(() => {
        if (id) {
            fetchUserResult(id);
        }
    }, [id]);

    const fetchUserResult = async (userId: string) => {
        try {
            console.log("fetching user result", userId);
            const response = await fetch('/api/user/newTestRes', {
                method: "POST",
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ id: userId }),
            });
            const data = await response.json();
            console.log("Data received:", data);
            setResult(data.DisesesList);
        } catch (error) {
            console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", error);
        }
    };

    const parsedResult = useMemo(() => {
        return result
            ? result.map((disease: string) => {
                try {
                    if (typeof disease === "string" && disease.trim().startsWith("{") && disease.trim().endsWith("}")) {
                        return JSON.parse(disease);
                    } else {
                        return null;
                    }
                } catch (e) {
                    return null;
                }
            }).filter(Boolean)
            : [];
    }, [result]);

    useEffect(() => {
        if (parsedResult.length > 0) {
            const maxDiagnosis = parsedResult.reduce((max, current) => {
                return current.score > max.score ? current : max;
            });
            setMaxDiagnosis(maxDiagnosis);
            fetchInfoForWidget(maxDiagnosis.title);
        }
    }, [parsedResult]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const handleOutsideClick = (e: MouseEvent) => {
        if (containerRef.current && !containerRef.current.contains(e.target as Node)) {
            setIsOpen(false);
        }
    };

    useEffect(() => {
        document.addEventListener("click", handleOutsideClick);

        return () => {
            document.removeEventListener("click", handleOutsideClick);
        };
    }, []);

    if (!isOpen) return null; // –ï—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç, –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º –µ–≥–æ

    return (
        <div
            ref={containerRef}
            className="bg-neutral-300 h-[90%] w-[90%] rounded-3xl flex flex-row p-3"
        >
            <div className="flex flex-col w-1/2 h-full mr-3 gap-3">
                <div className="flex h-1/2">
                    <NewChart diseasesList={parsedResult} />
                </div>
                <div className="flex h-1/2 bg-white rounded-3xl flex-row shadow justify-between items-center p-3">
                    <CardDescription className="flex flex-col gap-3 w-1/3 ml-4">
                        –í—ã –æ—Ç–ª–∏—á–Ω–æ –ø–æ—Å—Ç–∞—Ä–∞–ª–∏—Å—å! üéâ –í–∞—à —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω, –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ—Ç–æ–≤—ã. –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –º—ã
                        —Å–º–æ–≥–ª–∏ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø—É—Ç–∏ –∏—Ö —Ä–µ—à–µ–Ω–∏—è.
                        <strong>–í–∞—à –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑:</strong>
                        <span className="text-green-600 text-2xl">
                            {maxDiagnosis ? maxDiagnosis.title : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑"}
                        </span>
                    </CardDescription>

                    {/* –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ—Å—Ç–∞ –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º */}
                    {post && (
                        <PostsResult
                            author={post.title}
                            description={post.body}
                            title={post.title}
                            categories={post.categories.map((category) => category.name) || []} // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
                            image={post.image || ""}
                        />
                    )}
                </div>
            </div>
            <div className="flex flex-col w-1/2 gap-2 h-full ">
                <Doctorscopmonent doctors={doctors} />
                <Doctorscopmonent doctors={doctors} />
                <Doctorscopmonent doctors={doctors} />
            </div>
        </div>
    );
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                String              @id @default(cuid())
  email             String?             @unique
  name              String?
  surname           String?
  phone             String?
  emailVerified     DateTime?
  image             String?
  role              Role                @default(USER)
  password          String?
  messages          Message[]
  consul            Consul[]
  profile           Profile?
  accounts          Account[]
  sessions          Session[]
  verified          Boolean?            @default(false)
  provider          String?
  providerId        String?
  verificationToken VerificationToken[] @relation("UserToVerificationToken")
  registrationDate  DateTime            @default(now())
  firstTestDate     DateTime?
  specialty         String?
  description       String?
  disease           Disease?            @relation("DoctorForDisease") // Указано только имя связи
  Disease           Disease[]
  DisesesList       String[]

  cart             Cart?
  orders           Order[]
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique // Изменено на String
  createdAt DateTime @default(now())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserToVerificationToken")

  @@unique([id, token])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  title     String
  body      String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
}

model Consul {
  id       String   @id @default(cuid())
  date     DateTime
  author   User     @relation(fields: [authorId], references: [id])
  authorId String
  contact  String
  name     String
  coment   String?
  isRead   Boolean  @default(false)
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Post {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  title      String
  body       String
  published  Boolean    @default(false)
  categories Category[] @relation("CategoryToPost")
  image      String?
  diseaseId  Int? // FK для связи с Disease
  disease    Disease?   @relation("PostToDisease") // Только имя связи
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[] @relation("CategoryToPost")
}

enum Role {
  USER
  ADMIN
  DOCTOR
}

///////////

model Test {
  id          Int          @id
  title       String       @unique
  urltitle    String       @unique
  questions   Question[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  disease     Disease[]
  defaultTest DefaultTest? @relation("DefaultTestRelation")
}

model Question {
  id      Int      @id @default(autoincrement())
  text    String
  test    Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId  Int
  options Option[]
}

model Option {
  id         Int       @id @default(autoincrement())
  text       String
  score      Int
  question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  minDisease Disease[] @relation("MinDiseases")
  maxDisease Disease[] @relation("MaxDiseases")
}

model Disease {
  id        Int      @id @default(autoincrement())
  title     String   @unique
  testId    Int? // Опциональное поле
  test      Test?    @relation(fields: [testId], references: [id])
  doctorId  String?  @unique // Связь с одним врачом
  doctor    User?    @relation("DoctorForDisease", fields: [doctorId], references: [id]) // Один к одному
  postId    Int?     @unique // Связь с одной статьей
  post      Post?    @relation("PostToDisease", fields: [postId], references: [id]) // Один к одному
  OptionMin Option[] @relation("MinDiseases")
  OptionMax Option[] @relation("MaxDiseases")
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model CPAPMachine {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DefaultTest {
  id        Int    @id @default(autoincrement())
  testTitle String @unique
  test      Test   @relation("DefaultTestRelation", fields: [testTitle], references: [title])
}

model Category2 {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id Int @id @default(autoincrement())

    name     String
    imageUrl String

    ingredients Ingredient[]
    items       ProductItem[]

    category   Category2 @relation(fields: [categoryId], references: [id])
    categoryId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductItem {
    id Int @id @default(autoincrement())

    price     Int
    size      Int?
    pizzaType Int?

    cartItems CartItem[]

    product   Product @relation(fields: [productId], references: [id])
    productId Int
}

model Ingredient {
    id Int @id @default(autoincrement())

    name     String
    price    Int
    imageUrl String

    products  Product[]
    cartItems CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Cart {
    id Int @id @default(autoincrement())

    user      User?  @relation(fields: [userId], references: [id])
    userId    String? @unique // Исправлено на String и добавлено @unique

    items CartItem[]

    token String

    totalAmount Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
    id Int @id @default(autoincrement())

    cart   Cart @relation(fields: [cartId], references: [id])
    cartId Int

    productItem   ProductItem @relation(fields: [productItemId], references: [id])
    productItemId Int

    quantity Int @default(1)

    ingredients Ingredient[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id Int @id @default(autoincrement())

    user      User?  @relation(fields: [userId], references: [id])
    userId    String? // Исправлено на String и добавлено @unique

    token String

    totalAmount Int
    status      OrderStatus
    paymentId   String?

    items Json

    fullName String
    email    String
    phone    String
    address  String
    comment  String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Story {
    id              Int    @id @default(autoincrement())
    previewImageUrl String

    items StoryItem[]

    createdAt DateTime @default(now())
}

model StoryItem {
    id Int @id @default(autoincrement())

    storyId Int
    story   Story @relation(fields: [storyId], references: [id])

    sourceUrl String

    createdAt DateTime @default(now())
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELLED
}

enum UserRole {
    USER
    ADMIN
}

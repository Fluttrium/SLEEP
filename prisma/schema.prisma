generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                     String             @id @default(cuid())
  email                  String?            @unique
  name                   String?
  surname                String?
  phone                  String?
  emailVerified          DateTime?
  image                  String?
  role                   Role               @default(USER)
  password               String?
  verified               Boolean?           @default(false)
  provider               String?
  providerId             String?
  registrationDate       DateTime           @default(now())
  firstTestDate          DateTime?
  specialty              String?
  description            String?
  DisesesList            String[]
  diseaseId              Int?
  accounts               Account[]
  cart                   Cart?
  consul                 Consul[]
  Disease                Disease[]
  messages               Message[]
  orders                 Order[]
  consulorders           ConsulOrder[]
  profile                Profile?
  sessions               Session[]
  verificationToken      VerificationToken? @relation("UserToVerificationToken")
  Disease_DoctorDiseases Disease[]          @relation("DoctorDiseases")
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  userId    String   @unique
  user      User     @relation("UserToVerificationToken", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([id, token])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  title     String
  body      String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
}

model Consul {
  id       String   @id @default(cuid())
  date     DateTime
  authorId String
  contact  String
  name     String
  coment   String?
  isRead   Boolean  @default(false)
  author   User     @relation(fields: [authorId], references: [id])
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Post {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  title      String
  body       String
  published  Boolean    @default(false)
  image      String?
  diseaseId  Int?
  disease    Disease?   @relation("PostToDisease")
  categories Category[] @relation("CategoryToPost")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[] @relation("CategoryToPost")
}

model Test {
  id          Int          @id
  title       String       @unique
  urltitle    String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  defaultTest DefaultTest? @relation("DefaultTestRelation")
  disease     Disease[]
  questions   Question[]
}

model Question {
  id      Int      @id @default(autoincrement())
  text    String
  testId  Int
  options Option[]
  test    Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
}

model Option {
  id         Int       @id @default(autoincrement())
  text       String
  score      Int
  questionId Int
  question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  maxDisease Disease[] @relation("MaxDiseases")
  minDisease Disease[] @relation("MinDiseases")
}

model Disease {
  id             Int       @id @default(autoincrement())
  title          String    @unique
  testId         Int?
  postId         Int?      @unique
  userId         String?
  post           Post?     @relation("PostToDisease", fields: [postId], references: [id])
  test           Test?     @relation(fields: [testId], references: [id])
  User           User?     @relation(fields: [userId], references: [id])
  assignedDoctor User[]    @relation("DoctorDiseases")
  OptionMax      Option[]  @relation("MaxDiseases")
  OptionMin      Option[]  @relation("MinDiseases")
  Product        Product[] @relation("ProductDiseases")
}

model CPAPMachine {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DefaultTest {
  id        Int    @id @default(autoincrement())
  testTitle String @unique
  test      Test   @relation("DefaultTestRelation", fields: [testTitle], references: [title])
}

model Category2 {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id          Int           @id @default(autoincrement())
  name        String
  imageUrl    String
  categoryId  Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  category    Category2     @relation(fields: [categoryId], references: [id])
  items       ProductItem[]
  ingredients Ingredient[]  @relation("IngredientToProduct")
  Disease     Disease[]     @relation("ProductDiseases")
}

model ProductItem {
  id        Int        @id @default(autoincrement())
  price     Int
  size      Int?
  pizzaType Int?
  productId Int
  cartItems CartItem[]
  product   Product    @relation(fields: [productId], references: [id])
}

model Ingredient {
  id        Int        @id @default(autoincrement())
  name      String
  price     Int
  imageUrl  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cartItems CartItem[] @relation("CartItemToIngredient")
  products  Product[]  @relation("IngredientToProduct")
}

model Cart {
  id          Int        @id @default(autoincrement())
  userId      String?    @unique
  token       String
  totalAmount Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User?      @relation(fields: [userId], references: [id])
  items       CartItem[]
}

model CartItem {
  id            Int          @id @default(autoincrement())
  cartId        Int
  productItemId Int
  quantity      Int          @default(1)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  cart          Cart         @relation(fields: [cartId], references: [id])
  productItem   ProductItem  @relation(fields: [productItemId], references: [id])
  ingredients   Ingredient[] @relation("CartItemToIngredient")
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      String?
  token       String
  totalAmount Int
  status      OrderStatus
  paymentId   String?
  items       Json
  fullName    String
  email       String
  phone       String
  address     String
  comment     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User?       @relation(fields: [userId], references: [id])
}

model Story {
  id              Int         @id @default(autoincrement())
  previewImageUrl String
  createdAt       DateTime    @default(now())
  items           StoryItem[]
}

model StoryItem {
  id        Int      @id @default(autoincrement())
  storyId   Int
  sourceUrl String
  createdAt DateTime @default(now())
  story     Story    @relation(fields: [storyId], references: [id])
}


model ConsulProduct {
  id                Int                 @id @default(autoincrement())
  description       String
  doctorID          String
  image             String?
  price             Int?
  ConsulProductItem ConsulProductItem[]
}

model ConsulProductItem {
  id              Int           @id @default(autoincrement())
  consulProductId Int
  dateEnd         DateTime
  dateStart       DateTime
  ConsulProduct   ConsulProduct @relation(fields: [consulProductId], references: [id])
}

model ConsulOrder {
  id          Int         @id @default(autoincrement())
  userId      String?
  totalAmount Int
  status      OrderStatus
  paymentId   String?
  items       Json
  fullName    String
  email       String
  phone       String
  comment     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User?       @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
  DOCTOR
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}
